package frc.robot.commands.vision;

import java.util.HashMap;
import java.util.Map;

import com.ctre.phoenix6.swerve.SwerveModule.DriveRequestType;
import com.ctre.phoenix6.swerve.SwerveRequest;
import com.pathplanner.lib.auto.AutoBuilder;

import edu.wpi.first.math.controller.ProfiledPIDController;
import edu.wpi.first.math.filter.Debouncer;
import edu.wpi.first.math.filter.Debouncer.DebounceType;
import edu.wpi.first.math.geometry.Pose2d;
import edu.wpi.first.math.geometry.Rotation2d;
import edu.wpi.first.math.geometry.Translation2d;
import edu.wpi.first.math.trajectory.TrapezoidProfile;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.units.measure.LinearVelocity;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj2.command.SelectCommand;
import frc.robot.Constants.SwerveConstants;
import frc.robot.Constants.VisionConstants;
import frc.robot.LimelightHelpers;

public class PoseAlign {
    private static boolean useMegaTag2 = true; // set to false to use MegaTag1. Should test to see which one works better, 1 or 2? Or if they can be combined/we switch between them based on some conditions
    private static boolean doRejectUpdate = false;
    private static String limelightUsed;
    private static LimelightHelpers.PoseEstimate LLPoseEstimate;
    //Get average tag areas (percentage of image), Choose the limelight with the highest average tag area
    private static double limelightFrontAvgTagArea = 0;
    private static double limelightLeftAvgTagArea = 0;
    public static Map<Integer, Pose2d> tagPoseAndymarkMap = new HashMap<>();

    private final SwerveRequest.ApplyRobotSpeeds m_pathApplyRobotSpeeds = new SwerveRequest.ApplyRobotSpeeds();

    /** Swerve request to apply during field-centric PIDpath following */
    SwerveRequest.FieldCentric pathPIDRequest = new SwerveRequest.FieldCentric().withDriveRequestType(DriveRequestType.OpenLoopVoltage);
    SwerveRequest.FieldCentric pathPIDRequest2 = new SwerveRequest.FieldCentric();

    ProfiledPIDController pathPIDXController = new ProfiledPIDController(SwerveConstants.driveKP, SwerveConstants.driveKI, SwerveConstants.driveKD, 
                                                                                    new TrapezoidProfile.Constraints(SwerveConstants.dMaxVelocity, SwerveConstants.dMaxAccel));
    ProfiledPIDController pathPIDYController = new ProfiledPIDController(SwerveConstants.driveKP, SwerveConstants.driveKI, SwerveConstants.driveKD,
                                                                                    new TrapezoidProfile.Constraints(SwerveConstants.dMaxVelocity, SwerveConstants.dMaxAccel));
    ProfiledPIDController pathPIDRotationController = new ProfiledPIDController(SwerveConstants.alignKP, SwerveConstants.alignKI, SwerveConstants.alignKD, 
                                                                                    new TrapezoidProfile.Constraints(SwerveConstants.tMaxVelocity, SwerveConstants.tMaxAccel));
    private final Debouncer atGoalDebouncer = new Debouncer(0.5, DebounceType.kBoth);

    /**
     * Uses the autobuilder and PathPlanner's navigation grid to pathfind to a pose in real time
     * 
     * @param pose Pose to pathfind to
     * @param endVelocity Velocity at target pose
     */
    public Command pathPlanTo(Pose2d pose, LinearVelocity endVelocity){
        return AutoBuilder.pathfindToPose(pose, SwerveConstants.oTF_Constraints, endVelocity);
    }


    /**
     * Updates the currently used limelight based on which limelight has the largest average tag area.
     */
    private static void chooseLL(boolean useMegaTag2){
        limelightFrontAvgTagArea = NetworkTableInstance.getDefault().getTable(VisionConstants.LL_CENTER).getEntry("botpose").getDoubleArray(new double[11])[10];
        limelightLeftAvgTagArea = NetworkTableInstance.getDefault().getTable(VisionConstants.LL_LEFT).getEntry("botpose").getDoubleArray(new double[11])[10];
        SmartDashboard.putNumber("Center Limelight Tag Area", limelightFrontAvgTagArea);
        SmartDashboard.putNumber("Left Limelight Tag Area", limelightLeftAvgTagArea);   

        double translationSTD = 15; // safe value ---- ???? got it from them, but seems a bit large. jgt
        if(limelightFrontAvgTagArea > limelightLeftAvgTagArea){
            limelightUsed = "limelight-front";
            translationSTD = VisionConstants.getVisionStd(limelightFrontAvgTagArea);
        }
        else{
            limelightUsed = "limelight-back";
            translationSTD = VisionConstants.getVisionStd(limelightLeftAvgTagArea);
                
        }
        
        // if (useMegaTag2){
        //     visionStandardDeviation = VecBuilder.fill(translationSTD, translationSTD, 9999999); // Don't trust yaw, rely on Pigeon
        // } 
        // else{
        //     visionStandardDeviation = VecBuilder.fill(translationSTD, translationSTD, 999999999); // Use vision yaw reading --- the third value was originally 3 but i changed that back.
        // }

        // SmartDashboard.putString("Limelight Used", limelightUsed);
    }

    /**
     * @return {@code true} if an april tag is in sight, {@code false} otherwise
     */
    public boolean LLHasTag(){
        return getTag() != -1;
    }

    /**
     * Returns the ID of the AprilTag currently visible by the Limelight camera.
     * 
     * @return ID. Returns -1 if no tag is detected.
     */
    public int getTag() {
        int a = (int) NetworkTableInstance.getDefault().getTable(VisionConstants.LL_CENTER).getEntry("tid").getInteger(-1);
        int b = (int) NetworkTableInstance.getDefault().getTable(VisionConstants.LL_LEFT).getEntry("tid").getInteger(-1);
        return Math.max(a, b);
    }

    /**
     * Creates a command that moves the robot to the position of the AprilTag 
     * detected by the Limelight camera, adjusted by the left branch transformation.
     * 
     * @return A {@link Command} that moves the robot to the transformed position of the detected tag. 
     *         If no tag is visible, a command is returned that logs the absence of a tag.
     */
    private Command pathPIDToTagLeft(int ID){
        SmartDashboard.putNumber("Tag ID used", ID);
        SmartDashboard.putString("Path PID to", tagPoseAndymarkMap.get(ID).transformBy(VisionConstants.rightBranch).toString());

        if (ID != -1)
            return this.pathPIDTo(tagPoseAndymarkMap.get(ID).transformBy(VisionConstants.leftBranch), tagPoseAndymarkMap.get(ID));
        return new InstantCommand(() -> SmartDashboard.putBoolean("No Tag at pathPID", true));
    }

    private Command pathPIDToTagMiddle(int ID){
        SmartDashboard.putNumber("Tag ID used", ID);

        if (ID !=-1)
            return this.pathPIDTo(tagPoseAndymarkMap.get(ID).transformBy(VisionConstants.reefAlgae), tagPoseAndymarkMap.get(ID));
        return this.runOnce(() -> SmartDashboard.putBoolean("No Tag at pathPID", true));
        
    }

    /**
     * Creates a command that moves the robot to the position of the AprilTag 
     * detected by the Limelight camera, adjusted by the right branch transformation.
     * 
     * @return A {@link Command} that moves the robot to the transformed position of the detected tag. 
     *         If no tag is visible, a command is returned that logs the absence of a tag.
     */
    private Command pathPIDToTagRight(int ID){
        SmartDashboard.putNumber("Tag ID used", ID);
        SmartDashboard.putString("Path PID to", tagPoseAndymarkMap.get(ID).transformBy(VisionConstants.rightBranch).toString());

        if (ID != -1)
            return this.pathPIDTo(tagPoseAndymarkMap.get(ID).transformBy(VisionConstants.rightBranch), tagPoseAndymarkMap.get(ID));
        return this.runOnce(() -> SmartDashboard.putBoolean("No Tag at pathPID", true));
    }

    public Command pathPIDToTagMiddleSelect(){
        return new SelectCommand<>(
            Map.ofEntries(
                Map.entry(17, this.pathPIDToTagMiddle(17)),
                Map.entry(18, this.pathPIDToTagMiddle(18)),
                Map.entry(19, this.pathPIDToTagMiddle(19)),
                Map.entry(20, this.pathPIDToTagMiddle(20)),
                Map.entry(21, this.pathPIDToTagMiddle(21)),
                Map.entry(22, this.pathPIDToTagMiddle(22)),
                Map.entry(6, this.pathPIDToTagMiddle(6)),
                Map.entry(7, this.pathPIDToTagMiddle(7)),
                Map.entry(8, this.pathPIDToTagMiddle(8)),
                Map.entry(9, this.pathPIDToTagMiddle(9)),
                Map.entry(10, this.pathPIDToTagMiddle(10)),
                Map.entry(11, this.pathPIDToTagMiddle(11)))
        , this::getTag);
    }

    public Command pathPIDToTagRightSelect(){
        return new SelectCommand<>(
            Map.ofEntries(
                Map.entry(17, this.pathPIDToTagRight(17)),
                Map.entry(18, this.pathPIDToTagRight(18)),
                Map.entry(19, this.pathPIDToTagRight(19)),
                Map.entry(20, this.pathPIDToTagRight(20)),
                Map.entry(21, this.pathPIDToTagRight(21)),
                Map.entry(22, this.pathPIDToTagRight(22)), 
                Map.entry(6, this.pathPIDToTagRight(6)),
                Map.entry(7, this.pathPIDToTagRight(7)),
                Map.entry(8, this.pathPIDToTagRight(8)),
                Map.entry(9, this.pathPIDToTagRight(9)),
                Map.entry(10, this.pathPIDToTagRight(10)),
                Map.entry(11, this.pathPIDToTagRight(11)))
        , this::getTag);
    }
    

    /**
     * Creates a command that moves the robot to the specified {@link Pose2d} using PID controllers 
     * for X, Y, and rotation. The command runs until all PID controllers reach their goals, 
     * as determined by the debouncer.
     * 
     * @param goalPose The target {@link Pose2d} the robot should move to.
     * @return A {@link Command} that moves the robot to the specified pose.
     */
    private Command pathPIDTo(Pose2d goalPose, Pose2d tagPose){
        return this.startRun(()->{
            Pose2d currentFieldPose2d = this.getState().Pose;
            Pose2d currentTagPose2d = currentFieldPose2d.relativeTo(tagPose);
            Pose2d goalTagPose2d = goalPose.relativeTo(tagPose);

            pathPIDXController.reset(currentTagPose2d.getX());
            pathPIDYController.reset(currentTagPose2d.getY());
            pathPIDRotationController.reset(currentTagPose2d.getRotation().getRadians());

            pathPIDXController.setGoal(goalTagPose2d.getX());
            pathPIDYController.setGoal(goalTagPose2d.getY());
            pathPIDRotationController.setGoal(goalTagPose2d.getRotation().getRadians());
        
            }, () -> {
                Pose2d currentFieldPose2d = this.getState().Pose;
                Pose2d currentTagPose2d = currentFieldPose2d.relativeTo(tagPose);

                Translation2d fieldVelocity = new Translation2d(pathPIDXController.calculate(currentTagPose2d.getX()), pathPIDYController.calculate(currentTagPose2d.getY())).rotateBy(tagPose.getRotation());

                pathPIDRequest
                    .withVelocityX(fieldVelocity.getX() * flip_for_red * 1.5)
                    .withVelocityY(fieldVelocity.getY() * flip_for_red * 1.5)
                    .withRotationalRate(pathPIDRotationController.calculate(currentTagPose2d.getRotation().getRadians()))
                    .withDeadband(0.05)
                    .withRotationalDeadband(Math.toRadians(2));

                // pathPIDRequest2.withSpeeds(new ChassisSpeeds(fieldVelocity.getX() * flip_for_red, fieldVelocity.getY() * flip_for_red, pathPIDRotationController.calculate(currentTagPose2d.getRotation().getRadians())));

                this.setControl(pathPIDRequest);

                // SmartDashboard.putNumber("X PID Position Error", pathPIDXController.getPositionError());
                // SmartDashboard.putNumber("X PID Velocity Error", pathPIDXController.getVelocityError());
                // SmartDashboard.putNumber("X PID Velocity setpoint", pathPIDXController.getSetpoint().velocity);
                // SmartDashboard.putNumber("X PID Output", pathPIDXController.calculate(currentTagPose2d.getX()));

                // SmartDashboard.putNumber("Y PID Position Error", pathPIDYController.getPositionError());
                // SmartDashboard.putNumber("Y PID Velocity Error", pathPIDYController.getVelocityError());
                // SmartDashboard.putNumber("Y PID Velocity setpoint", pathPIDYController.getSetpoint().velocity);
                // SmartDashboard.putNumber("Y PID Output", pathPIDYController.calculate(currentTagPose2d.getY()));

                // SmartDashboard.putNumber("Roation PID Position", currentTagPose2d.getRotation().getRadians());
                // SmartDashboard.putNumber("Rotation PID Position Error", pathPIDRotationController.getPositionError());
                // SmartDashboard.putNumber("Rotation PID Velocity Error", pathPIDRotationController.getVelocityError());
                // SmartDashboard.putNumber("Roation PID Velocity Setpoint", pathPIDRotationController.getSetpoint().velocity);
                // SmartDashboard.putNumber("Roation PID Position Setpoint", pathPIDRotationController.getSetpoint().position);
                // SmartDashboard.putNumber("Rotation PID Output", pathPIDRotationController.calculate(currentTagPose2d.getRotation().getRadians()));

                // SmartDashboard.putBoolean("X PID At Goal", pathPIDXController.atGoal());
                // SmartDashboard.putBoolean("Y PID At Goal", pathPIDYController.atGoal());
                // SmartDashboard.putBoolean("Rotation PID At Goal", pathPIDRotationController.atGoal());

                // SmartDashboard.putNumber("X Total Output", pathPIDXController.calculate(currentTagPose2d.getX()) + pathPIDXController.getSetpoint().velocity);
                // SmartDashboard.putNumber("Y Total Output", pathPIDYController.calculate(currentTagPose2d.getY())+ pathPIDYController.getSetpoint().velocity);
                // SmartDashboard.putNumber("Rotation Total Output", pathPIDRotationController.calculate(currentTagPose2d.getRotation().getRadians()) + pathPIDRotationController.getSetpoint().velocity);

            }).until(() -> pathPIDAtGoal()).withName("PathPIDTo");
    }

    /**
     * Checks if the PID path follower has been at the goal for the specified debouncer time.
     * 
     * @return {@code true} if the PID controllers for X, Y, and rotation have all been at the goal 
     *         for at least {@code 0.5} seconds (the debouncer time), otherwise {@code false}.
     */
    public boolean pathPIDAtGoal (){
        return atGoalDebouncer.calculate(pathPIDXController.atGoal() && pathPIDYController.atGoal() && pathPIDRotationController.atGoal());
    }

    public void useMegaTag2(boolean input){
        useMegaTag2 = input;
    }

    public void initializeAndyMarkMap(){

        tagPoseAndymarkMap.put(6, new Pose2d(13.474, 3.301, new Rotation2d(Math.toRadians(-60))));
        tagPoseAndymarkMap.put(7, new Pose2d(13.890, 4.021, new Rotation2d(Math.toRadians(0))));
        tagPoseAndymarkMap.put(8, new Pose2d(13.474, 4.740, new Rotation2d(Math.toRadians(60))));
        tagPoseAndymarkMap.put(9, new Pose2d(12.643, 4.740, new Rotation2d(Math.toRadians(120))));
        tagPoseAndymarkMap.put(10, new Pose2d(12.227, 4.021, new Rotation2d(Math.toRadians(180))));
        tagPoseAndymarkMap.put(11, new Pose2d(12.643, 3.301, new Rotation2d(Math.toRadians(-120))));
    
        tagPoseAndymarkMap.put(17, new Pose2d(4.074, 3.301, new Rotation2d(Math.toRadians(-120))));
        tagPoseAndymarkMap.put(18, new Pose2d(3.658, 4.021, new Rotation2d(Math.toRadians(180))));
        tagPoseAndymarkMap.put(19, new Pose2d(4.074, 4.740, new Rotation2d(Math.toRadians(120))));
        tagPoseAndymarkMap.put(20, new Pose2d(4.905, 4.740, new Rotation2d(Math.toRadians(60))));
        tagPoseAndymarkMap.put(21, new Pose2d(5.321, 4.021, new Rotation2d(Math.toRadians(0))));
        tagPoseAndymarkMap.put(22, new Pose2d(4.905, 3.301, new Rotation2d(Math.toRadians(-60))));
    }
}
